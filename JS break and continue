break can be used to escape from any type of loop.

Example:
let i = 0;
while (i <= 10) {
  if (i === 5) break;
  console.log(i);
  i++;
}
// output is numbers 0-4.

continue isn't used very often and is a fairly ugly way of doing loops, but here is how it works.

continue example:
Let's see if i is an even number or not.

let i = 0;
while (i <= 10) {
  if (i % 2 === 0) {
  i++;
  continue;
  }
  console.log(i);
  i++;
}
// output is 1, 3, 5, 7, 9

Why is that? when i becomes 2, its an even number, so it increments i so i == 3, when Javascript sees the continue keyword it jumps back to
the start of the loop and continues execution with the next iteration. Much like the old VB GOTO command.
Then it continues through the loop logic again, the if condition fails due to it not being an even number so the logic goes down to the
console.log, then increments i, and loops back to the top.
