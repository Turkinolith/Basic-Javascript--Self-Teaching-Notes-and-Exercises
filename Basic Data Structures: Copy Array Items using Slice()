*Description:*

The next method we will cover is slice(). slice(), rather than modifying an
array, copies, or *extracts*, a given number of elements to a new array,
leaving the array it is called upon untouched. slice()takes only 2
parameters â€” the first is the index at which to begin extraction, and the
second is the index at which to stop extraction (*extraction will occur up
to, but not including the element at this index*). Consider this:

let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];

let todaysWeather = weatherConditions.slice(1, 3);
// todaysWeather equals ['snow', 'sleet'];
// weatherConditions still equals ['rain', 'snow', 'sleet', 'hail', 'clear']

In effect, we have created a new array by extracting elements from an
existing array.

*Instructions:*
We have defined a function, forecast, that takes an array as an argument.
Modify the function using slice()to extract information from the argument
array and return a new array that contains the elements 'warm'and 'sunny'.

forecastshould return ["warm", "sunny"]
Passed
The forecastfunction should utilize the slice()method

**NOTE: I did not want to solve this using hard coded values, so I used
the *
*"Indexof()" function to search the array for the values and return their
index. Since the stop arguement does not include itself, I did a simple +1
to the result.*

*Final Code:*
function forecast(arr) {
// change code below this line
return arr.slice(arr.indexOf("warm"), (arr.indexOf("sunny") + 1) ) ;
}

// do not change code below this line
console.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool',
'thunderstorms']));
