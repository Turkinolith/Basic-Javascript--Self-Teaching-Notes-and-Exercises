// write a function that will take a number and return the sum of all multiples of 3 and 5 up to and including the value.
// ex 10
// Multiples of 3: 3, 6, 9
// Multiples of 5: 5, 10
// result is 33.

// const multiplesOf = (numbers, number) => numbers.filter(n => !(n % number));
// console.log(multiplesOf([4, 5, 6, 7, 8], 2)); // [4, 6, 8]


// Version 1
function merge(total, number) {
    return total + number;
}

function sum(limit) {
    let multsForThree = [];
    let multsForFive = [];

    for (let i = 1; i <= limit; i++) {
        if (i % 3 === 0) multsForThree.push(i);
    }
    let solveForThree = multsForThree.reduce(merge, 0);
    for (let k = 1; k <= limit; k++) {
        if (k % 5 === 0) multsForFive.push(k);
    }
    let solveForFive = multsForFive.reduce(merge, 0);

    return solveForThree + solveForFive;
}

console.log(sum(5));

// Refactor 

function new_sum(limit) {
    let sum = 0;

    for (let i = 0; i <= limit; i++)
        if (i % 3 === 0 || i % 5 === 0)
            sum += i;

    return sum;
}
console.log(new_sum(5));

/*
Okay, my original was pretty cumbersome.
Let's see how sloppy it was compared to the new refactor.
*/

let iterations = 1000
console.time('Original #1');
for (let i = 0; i < iterations; i++) {
    sum(20);
};
console.timeEnd('Original #1');
// Yep, pretty slow: Original #1: 3.052978515625ms

console.time('Refactor');
for (let i = 0; i < iterations; i++) {
    new_sum(20);
};
console.timeEnd('Refactor');
// Fast but not as much as I'd have expected: Refactor: 2.1708984375ms
